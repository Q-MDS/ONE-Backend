<?php 

class Api_model extends CI_Model 
{
	// √ 08022025
	function checkUserExists($email)
	{
		$this->db->where('cred_one', $email);
		$query = $this->db->get('members');
		if($query->num_rows() > 0)
		{
			return true;
		}
		else 
		{
			return false;
		}
	}
	
	// √ 08022025
	function createMember($data)
	{
		$this->db->insert('members', $data);

		return $this->db->insert_id();
	}

	// √ 08022025
	function addSubscription($data)
	{
		$this->db->insert('subscriptions', $data);

		return $this->db->insert_id();
	}


	// function createSubscriber($now, $rc_id, $cred_1, $cred_2, $first_name, $last_name, $email)
	// {
	// 	$data = array(
	// 		'rc_id' => $rc_id,
	// 		'cred_one' => $cred_1,
	// 		'cred_two' => sha1($cred_2),
	// 		'first_name' => $first_name,
	// 		'last_name' => $last_name,
	// 		'email' => $email,
	// 		'subscribe_date' => $now,
	// 		'subscribe_status' => 1,
	// 		'profile' => '',
	// 		'created_at' => $now,
	// 		'updated_at' => $now
	// 	);
	// 	$this->db->insert('members', $data);

	// 	return $this->db->insert_id();
	// }

	function updateProfile($insert_id, $data)
	{
		$this->db->where('id', $insert_id);
		$this->db->update('members', $data);

		return $this->db->affected_rows();
	}

    function registerUser($data)
    {
        $this->db->insert('users', $data);

		return $this->db->insert_id();
    }

    function checkLogin($cred_one, $cred_two)
	{
		$data = array();
		$chk_cred_two = sha1($cred_two);
		$num_recs = 0;
		
		$query = $this->db->query("SELECT * FROM members WHERE cred_one = " . $this->db->escape($cred_one) . " AND cred_two = " . $this->db->escape($chk_cred_two) . "");
		
		if ($query->num_rows() > 0)
		{
			$num_recs = $query->num_rows();
		
			foreach ($query->result_array() as $row)
			{
				$data = $row;
			}
		}
		$query->free_result();
		
		if ($num_recs > 0)
		{
			return $data;
		}
		else
		{
			return false;
		}
    }

	public function updatePlanType($userId, $data)
	{
		$this->db->where('id', $userId);
		$this->db->update('members', $data);

		return $this->db->affected_rows();
	}

	function updatePassword($userId, $data)
	{
		$this->db->where('id', $userId);
		$this->db->update('members', $data);

		return $this->db->affected_rows();
	}

	function getMember($memberId)
	{
		// $data = array();
		
		// $num_recs = 0;
		
		// $query = $this->db->query("SELECT * FROM members WHERE id = " . $this->db->escape($memberId) . "");
		
		// if ($query->num_rows() > 0)
		// {
		// 	$num_recs = $query->num_rows();
		
		// 	foreach ($query->result_array() as $row)
		// 	{
		// 		$data = $row;
		// 	}
		// }
		// $query->free_result();
		
		// return $data;
		$this->db->where('id', $memberId);
		$query = $this->db->get('members');
		return $query->row();
	}	

    function getProfile($userId)
    {
        $this->db->select('name,email');
        $this->db->where(['id'=>$userId]);
        $query = $this->db->get('users');
        return $query->row();
    }

    function getQuotes()
    {
        $data = array();
		
		$query = $this->db->query("SELECT * FROM list_quotes");
		
		if ($query->num_rows() > 0)
		{
			$num_recs = $query->num_rows();
		
			foreach ($query->result_array() as $row)
			{
				$data[] = $row;
			}
		}
		$query->free_result();
		
		return $data;
    }

    function getPurposes()
    {
        $query = $this->db->query("SELECT * FROM list_purpose");
		return $query->result_array();
    }

	function getQuestions()
    {
        $data = array();
		
		$query = $this->db->query("SELECT * FROM list_quiz");
		
		if ($query->num_rows() > 0)
		{
			foreach ($query->result_array() as $row)
			{
				$data[] = $row;
			}
		}
		$query->free_result();
		
		return $data;
    }

	function getLinks()
	{
		$query = $this->db->query("SELECT * FROM `links` ORDER BY `id`");
		return $query->result_array();
	}

	function deleteMember($remote_id)
	{
		$this->db->where('id', $remote_id);
		$this->db->delete('members');

		return $this->db->affected_rows();
	}

	public function get_user_by_email($email) 
	{
        return $this->db->get_where('members', ['email' => $email])->row();
    }

	public function set_reset_token($user_id, $token) {
        $data = [
            'reset_token' => $token,
            'reset_token_expires' => time() + 3600 // 1 hour
        ];
        $this->db->where('id', $user_id);
        $this->db->update('members', $data);
    }
}
